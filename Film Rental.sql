use film_rental;
show tables;

#1.	WHAT IS THE TOTAL REVENUE GENERATED FROM ALL RENTALS IN THE DATABASE? 
SELECT SUM(AMOUNT) AS TOTALREVENUE
FROM PAYMENT;

#2.	HOW MANY RENTALS WERE MADE IN EACH MONTH_NAME?
SELECT MONTHNAME(RENTAL_DATE) AS MONTH, COUNT(*) AS RENTALS_COUNT
FROM RENTAL
GROUP BY MONTHNAME(RENTAL_DATE);

#3.	WHAT IS THE RENTAL RATE OF THE FILM WITH THE LONGEST TITLE IN THE DATABASE? 
SELECT TITLE,LENGTH(TITLE),RENTAL_RATE
FROM FILM
WHERE LENGTH(TITLE)=(
SELECT MAX(LENGTH(TITLE)) FROM FILM
);

#4. WHAT IS THE AVERAGE RENTAL RATE FOR FILMS THAT WERE TAKEN FROM THE LAST 30 DAYS FROM THE DATE("2005-05-05 22:04:30")?
SELECT AVG(F.RENTAL_RATE) AS AVERAGE_RENTAL_RATE
FROM RENTAL R
JOIN INVENTORY I ON R.INVENTORY_ID = I.INVENTORY_ID
JOIN FILM F ON I.FILM_ID = F.FILM_ID
WHERE R.RENTAL_DATE >= DATE_SUB('2005-05-05 22:04:30', INTERVAL 30 DAY)
AND R.RENTAL_DATE <= '2005-05-05 22:04:30';

#5.	WHAT IS THE MOST POPULAR CATEGORY OF FILMS IN TERMS OF THE NUMBER OF RENTALS?
SELECT C.NAME AS CATEGORY_NAME, COUNT(*) AS RENTAL_COUNT
FROM FILM_CATEGORY FC
JOIN FILM F 
ON FC.FILM_ID = F.FILM_ID
JOIN RENTAL R 
ON F.FILM_ID = R.INVENTORY_ID
JOIN CATEGORY C 
ON FC.CATEGORY_ID = C.CATEGORY_ID
GROUP BY C.NAME
ORDER BY RENTAL_COUNT DESC
LIMIT 1;

#6.	FIND THE LONGEST MOVIE DURATION FROM THE LIST OF FILMS THAT HAVE NOT BEEN RENTED BY ANY CUSTOMER. 
SELECT MAX(F.LENGTH) AS LONGEST_DURATION
FROM FILM F
WHERE F.FILM_ID NOT IN (
    SELECT DISTINCT I.FILM_ID
    FROM INVENTORY I
    JOIN RENTAL R ON I.INVENTORY_ID = R.INVENTORY_ID
);

#7. WHAT IS THE AVERAGE RENTAL RATE FOR FILMS, BROKEN DOWN BY CATEGORY?
SELECT C.NAME AS CATEGORY, AVG(F.RENTAL_RATE) AS AVG_RENTAL_RATE 
FROM FILM F
JOIN FILM_CATEGORY FC
ON F.FILM_ID = FC.FILM_ID
JOIN CATEGORY C
ON FC.CATEGORY_ID = C.CATEGORY_ID
GROUP BY C.NAME;

#8.	WHAT IS THE TOTAL REVENUE GENERATED FROM RENTALS FOR EACH ACTOR IN THE DATABASE?
SELECT A.ACTOR_ID, CONCAT_WS(' ',A.FIRST_NAME, A.LAST_NAME) AS ACTOR_NAME, SUM(P.AMOUNT) 
AS TOTAL_GENERATED_RENTAL_AMT
FROM ACTOR A
JOIN FILM_ACTOR FA
ON A.ACTOR_ID = FA.ACTOR_ID
JOIN FILM F
ON FA.FILM_ID = F.FILM_ID
JOIN INVENTORY I
ON F.FILM_ID = I.FILM_ID
JOIN RENTAL R
ON I.INVENTORY_ID = R.INVENTORY_ID
JOIN PAYMENT P
ON R.RENTAL_ID = P.RENTAL_ID
GROUP BY A.ACTOR_ID, ACTOR_NAME
ORDER BY TOTAL_GENERATED_RENTAL_AMT DESC;

#9.	SHOW ALL THE ACTRESSES WHO WORKED IN A FILM HAVING A "WRESTLER" IN THE DESCRIPTION. 
SELECT CONCAT(A.FIRST_NAME,' ', A.LAST_NAME) AS ACTORS_NAME, F.TITLE, F.DESCRIPTION
FROM FILM F
JOIN FILM_ACTOR FA
ON F.FILM_ID = FA.FILM_ID
JOIN ACTOR A
ON FA.ACTOR_ID = A.ACTOR_ID
WHERE DESCRIPTION LIKE '%WRESTLER%';

#10. WHICH CUSTOMERS HAVE RENTED THE SAME FILM MORE THAN ONCE?
SELECT C.CUSTOMER_ID, CONCAT_WS(' ', C.FIRST_NAME, C.LAST_NAME) AS CUSTOMER_NAME,
       I.FILM_ID, F.TITLE AS MOVIE_NAME, COUNT(*) AS RENTAL_COUNT
FROM CUSTOMER C
JOIN RENTAL R 
ON C.CUSTOMER_ID = R.CUSTOMER_ID
JOIN INVENTORY I 
ON R.INVENTORY_ID = I.INVENTORY_ID
JOIN FILM F 
ON I.FILM_ID = F.FILM_ID
GROUP BY C.CUSTOMER_ID, I.FILM_ID
HAVING COUNT(*) > 1;

#11. HOW MANY FILMS IN THE COMEDY CATEGORY HAVE A RENTAL RATE HIGHER THAN THE AVERAGE RENTAL RATE?
SELECT C.NAME AS GENRE, COUNT(F.FILM_ID) AS COUNT_OF_FILMS
FROM FILM F
JOIN FILM_CATEGORY FC 
ON F.FILM_ID = FC.FILM_ID
JOIN CATEGORY C 
ON FC.CATEGORY_ID = C.CATEGORY_ID
WHERE C.NAME = 'COMEDY'
AND F.RENTAL_RATE > (
					SELECT AVG(F.RENTAL_RATE)
					FROM FILM F
					JOIN FILM_CATEGORY FC 
					ON F.FILM_ID = FC.FILM_ID
					JOIN CATEGORY C 
					ON FC.CATEGORY_ID = C.CATEGORY_ID
					WHERE C.NAME = 'COMEDY'
);

#12. WHICH FILMS HAVE BEEN RENTED THE MOST BY CUSTOMERS LIVING IN EACH CITY?
SELECT CITY,
       FILM_TITLE,
       RENTAL_COUNT
FROM (
    SELECT C.CITY,
           F.TITLE AS FILM_TITLE,
           COUNT(*) AS RENTAL_COUNT,
           ROW_NUMBER() OVER (PARTITION BY C.CITY ORDER BY COUNT(*)DESC) AS RN
    FROM RENTAL R
    JOIN CUSTOMER CU ON R.CUSTOMER_ID = CU.CUSTOMER_ID
    JOIN ADDRESS A ON CU.ADDRESS_ID = A.ADDRESS_ID
    JOIN CITY C ON A.CITY_ID = C.CITY_ID
    JOIN INVENTORY I ON R.INVENTORY_ID = I.INVENTORY_ID
    JOIN FILM F ON I.FILM_ID = F.FILM_ID
    GROUP BY C.CITY, F.TITLE
) AS RANKED_FILMS
WHERE RN = 1;

#13. WHAT IS THE TOTAL AMOUNT SPENT BY CUSTOMERS WHOSE RENTAL PAYMENTS EXCEED $200? 
SELECT SUM(TOTAL_AMOUNT) AS TOTAL_AMOUNT_SPENT
FROM (SELECT SUM(AMOUNT) AS TOTAL_AMOUNT FROM PAYMENT
	  GROUP BY CUSTOMER_ID
	  HAVING SUM(AMOUNT) > 200
) AS PAYMENTS_ABOVE_200;

#14. DISPLAY THE FIELDS WHICH ARE HAVING FOREIGN KEY CONSTRAINTS RELATED TO THE "RENTAL" TABLE. [HINT: USING INFORMATION_SCHEMA] 
SELECT CONSTRAINT_NAME, TABLE_NAME, COLUMN_NAME, REFERENCED_TABLE_NAME, REFERENCED_COLUMN_NAME
FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
WHERE REFERENCED_TABLE_NAME = 'RENTAL' AND TABLE_SCHEMA = 'FILM_RENTAL';
    
#15. CREATE A VIEW FOR THE TOTAL REVENUE GENERATED BY 
CREATE VIEW STAFFREVENUEBYCITY AS
SELECT S.STAFF_ID, CONCAT(S.FIRST_NAME, ' ', S.LAST_NAME) AS STAFF_NAME,
C.CITY AS STORE_CITY, CO.COUNTRY AS STORE_COUNTRY,
SUM(P.AMOUNT) AS TOTAL_REVENUE
FROM STAFF S
JOIN STORE ST ON S.STORE_ID = ST.STORE_ID
JOIN ADDRESS A ON ST.ADDRESS_ID = A.ADDRESS_ID
JOIN CITY C ON A.CITY_ID = C.CITY_ID
JOIN COUNTRY CO ON C.COUNTRY_ID = CO.COUNTRY_ID
JOIN PAYMENT P ON S.STAFF_ID = P.STAFF_ID
GROUP BY S.STAFF_ID, C.CITY, CO.COUNTRY;
SELECT * FROM STAFFREVENUEBYCITY;

# 16. CREATE A VIEW BASED ON RENTAL INFORMATION CONSISTING OF VISITING_DAY, CUSTOMER_NAME, THE TITLE OF THE FILM,  
CREATE VIEW RENTALDETAILS AS
SELECT 
    DATE_FORMAT(R.RENTAL_DATE, '%Y-%M-%D') AS VISITING_DAY,
    CONCAT(C.FIRST_NAME, ' ', C.LAST_NAME) AS CUSTOMER_NAME,
    F.TITLE AS FILM_TITLE,
    DATEDIFF(R.RETURN_DATE, R.RENTAL_DATE) AS NO_OF_RENTAL_DAYS,
    P.AMOUNT AS AMOUNT_PAID,
    (P.AMOUNT / (SELECT SUM(AMOUNT) FROM PAYMENT WHERE CUSTOMER_ID = R.CUSTOMER_ID)) * 100 AS SPENDING_PERCENTAGE
FROM RENTAL R
JOIN CUSTOMER C ON R.CUSTOMER_ID = C.CUSTOMER_ID
JOIN INVENTORY I ON R.INVENTORY_ID = I.INVENTORY_ID
JOIN FILM F ON I.FILM_ID = F.FILM_ID
JOIN PAYMENT P ON R.RENTAL_ID = P.RENTAL_ID;
SELECT*FROM RENTALDETAILS;


#17.DISPLAY THE CUSTOMERS WHO PAID 50% OF THEIR TOTAL RENTAL COSTS WITHIN ONE DAY

SELECT 
    CONCAT(C.FIRST_NAME, ' ', C.LAST_NAME) AS CUSTOMER_NAME,
    R.RENTAL_ID,
    SUM(P.AMOUNT) AS TOTAL_AMOUNT_PAID,
    DATEDIFF(MAX(R.RETURN_DATE), MIN(R.RENTAL_DATE)) AS RENTAL_DURATION,
    ROUND((SUM(P.AMOUNT) / 
           (SELECT SUM(F.RENTAL_RATE) 
            FROM FILM F 
            JOIN INVENTORY I ON F.FILM_ID = I.FILM_ID
            JOIN RENTAL R2 ON I.INVENTORY_ID = R2.INVENTORY_ID
            WHERE R2.CUSTOMER_ID = R.CUSTOMER_ID AND DATEDIFF(R2.RETURN_DATE, R2.RENTAL_DATE) <= 1)
           ) * 100, 2) AS PAYMENT_PERCENTAGE
FROM RENTAL R
JOIN CUSTOMER C ON R.CUSTOMER_ID = C.CUSTOMER_ID
JOIN PAYMENT P ON R.RENTAL_ID = P.RENTAL_ID
JOIN INVENTORY I ON R.INVENTORY_ID = I.INVENTORY_ID
JOIN FILM F ON I.FILM_ID = F.FILM_ID
GROUP BY C.CUSTOMER_ID, R.RENTAL_ID
HAVING PAYMENT_PERCENTAGE >= 50 AND RENTAL_DURATION <= 1;





